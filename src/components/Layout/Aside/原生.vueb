<template>

  <el-aside
    id="layout-aside"
    :width="sidebar ? '64px' : '211px'"
    >
      <el-menu
        :default-active="activeMenu"
        :collapse="sidebar"
        unique-opened
        :collapse-transition="false"
        active-text-color="#0170fe"
        router
        class="el-menu-aside">
        <el-submenu :key="`${index}-${item.path}`" :index="item.path" v-for="(item, index) in menu">
          <template slot="title">
            <i class="el-icon-menu"></i>
            <span slot="title">{{item.name}}</span>
          </template>

          <template v-if="hasOneShowingChild(item.children,item)" >
            <h1>+++++++++++++++++</h1>
            <el-menu-item :key="`${index}-${subIndex}-${subItem.path}`" :index="subItem.path" v-for="(subItem, subIndex) in item.children">
              <i class="el-icon-location"></i>
              <span slot="title">{{subItem.meta && subItem.meta.title}}</span>
            </el-menu-item>
          </template>

          <template v-else>
            <h1>--------------</h1>
            <el-submenu :key="`${index}-${subIndex}-${subItem.path}`" :index="subItem.path" v-for="(subItem, subIndex) in item.children">
              <span slot="title"><i class="el-icon-s-operation"></i>{{subItem.meta.title}}</span>
              <template v-if="subItem.children">
                <el-menu-item :key="`${index}-${subIndex}-${cIndex}-${subItem.path}`" :index="cItem.path" v-for="(cItem, cIndex) in subItem.children"><i class="el-icon-location"></i>{{cItem.meta && cItem.meta.title}}</el-menu-item>
              </template>
            </el-submenu>
          </template>

        </el-submenu>
      </el-menu>
  </el-aside>
</template>
<script>
import { mapGetters } from 'vuex'
import { isExternal } from '@@/utils/validate'
import path from 'path'
export default {
  data () {
    return {
      onlyOneChild: null
    }
  },
  computed: {
    ...mapGetters(['sidebar', 'device', 'menu']),
    activeMenu () {
      const route = this.$route
      const { meta, path } = route
      // if set path, the sidebar will highlight the path you set
      if (meta.activeMenu) {
        return meta.activeMenu
      }
      return path
    }
  },
  methods: {
    hasOneShowingChild (children = [], parent) {
      const showingChildren = children.filter(item => {
        if (item.hidden) {
          return false
        } else {
          // Temp set(will be used if only has one showing child)
          this.onlyOneChild = item
          return true
        }
      })

      // When there is only one child router, the child router is displayed by default
      if (showingChildren.length === 1) {
        return true
      }

      // Show parent if there are no child router to display
      if (showingChildren.length === 0) {
        this.onlyOneChild = { ...parent, path: '', noShowingChildren: true }
        return true
      }

      return false
    },
    resolvePath (routePath) {
      if (isExternal(routePath)) {
        return routePath
      }
      if (isExternal(this.basePath)) {
        return this.basePath
      }
      return path.resolve(this.basePath, routePath)
    }
  }
}
</script>
<style lang="scss" scoped>
.el-menu-aside:not(.el-menu--collapse) {
  width: 210px;
  min-height: 400px;
}
#layout-aside {
  color: #333;
  background-color: #fff;
  border-right: 1px solid $borderGrey!important;
  .el-menu {
    border-right: none;
    .el-menu-item [class^=el-icon-],
    .el-submenu [class^=el-icon-]{
      position: relative;
      top: -2px;
    }
  }
}
</style>
